// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

enum Sex {
  EMPTY
  MALE
  FEMALE
}

// model Post {
//     id        Int      @id @default(autoincrement())
//     name      String
//     createdAt DateTime @default(now())
//     updatedAt DateTime @updatedAt
//
//     createdBy   User   @relation(fields: [createdById], references: [id])
//     createdById String
//
//     @@index([name])
// }

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? // @db.Text
  access_token      String? // @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? // @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id                        String                     @id @default(cuid())
  name                      String?
  email                     String?                    @unique
  emailVerified             DateTime?
  image                     String?
  accounts                  Account[]
  sessions                  Session[]
  createdAt                 DateTime                   @default(now())
  updatedAt                 DateTime                   @updatedAt
  userInfo                  UserInfo?
  userToKeyWords            UserToKeyWord[]
  userToRegistrationTargets UserToRegistrationTarget[]
}

model UserInfo {
  userId         String    @id
  user           User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  sex            Sex       @default(EMPTY)
  city           String?
  birthDay       DateTime?
  contacts       String?
  additionalInfo String?
}

model UserToKeyWord {
  userId    String
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  keyWordId String
  keyWord   KeyWord @relation(fields: [keyWordId], references: [keyWord], onDelete: Cascade)

  @@unique([userId, keyWordId])
}

model KeyWord {
  id             Int             @id @default(autoincrement())
  keyWord        String          @unique
  userToKeyWords UserToKeyWord[]
}

model UserToRegistrationTarget {
  userId               String
  user                 User               @relation(fields: [userId], references: [id])
  registrationTargetId String
  registrationTarget   RegistrationTarget @relation(fields: [registrationTargetId], references: [target])

  @@unique([userId, registrationTargetId])
}

model RegistrationTarget {
  id                        Int                        @id @default(autoincrement())
  target                    String                     @unique
  userToRegistrationTargets UserToRegistrationTarget[]
}
